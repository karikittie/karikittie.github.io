{"version":3,"sources":["App/shared/Console/enums.js","App/shared/Console/context.js","App/shared/Console/Console.js","App/shared/Console/Controller/printables.js","App/shared/Console/Controller/index.js","App/index.js","index.js"],"names":["LINE_TYPE","Object","freeze","NORMAL","LOGO","LINE_ACTION_TYPE","ADD_LINE","ADD_LOGO","CLEAR_LINES","UPDATE_LINE","ConsoleContext","createContext","ConsoleActionContext","lineReducer","state","action","type","id","uuid","content","data","map","l","filter","next","line","Error","ConsoleProvider","children","useReducer","lines","lineDispatch","Provider","value","print","Array","isArray","forEach","addLogo","clearScreen","currentListeners","registerInputHandler","handler","args","e","detail","event","push","document","addEventListener","unregisterInputHandler","found","find","removeEventListener","Console","useContext","useState","currentInput","setCurrentInput","Container","fluid","className","Row","key","Col","onChange","val","target","onKeyUp","CustomEvent","dispatchEvent","dispatchInputEvent","title","mainMenu","bio","Controller","firstView","useRef","inputHandler","listenForBack","a","oldHandler","current","Promise","acc","input","console","log","then","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.841509b0.chunk.js","sourcesContent":["export const LINE_TYPE = Object.freeze({\n  NORMAL: 'NORMAL',\n  LOGO: 'LOGO'\n});\n\nexport const LINE_ACTION_TYPE = Object.freeze({\n  ADD_LINE: 'ADD_LINE',\n  ADD_LOGO: 'ADD_LOGO',\n  CLEAR_LINES: 'CLEAR_LINES',\n  UPDATE_LINE: 'UPDATE_LINE'\n});\n\nexport const INPUT_EVENT_NAME = 'CONSOLE_INPUT_EVENT';\n","import React, { createContext, useReducer } from 'react';\nimport uuid from 'uuid/v4';\n\nimport { LINE_ACTION_TYPE, LINE_TYPE } from './enums';\n\nexport const ConsoleContext = createContext();\nexport const ConsoleActionContext = createContext();\n\nconst lineReducer = (state, action) => {\n  switch (action.type) {\n    case LINE_ACTION_TYPE.ADD_LINE:\n      return [...state, {\n        id: uuid(),\n        content: action.data,\n        type: LINE_TYPE.NORMAL\n      }];\n    case LINE_ACTION_TYPE.ADD_LOGO:\n      return [\n        ...action.data.map(l => ({\n          id: uuid(),\n          content: l,\n          type: LINE_TYPE.LOGO\n        })),\n        ...state.filter(l => l.type !== LINE_TYPE.LOGO)\n      ]\n    case LINE_ACTION_TYPE.CLEAR_LINES:\n      return state.filter(l => l.type === LINE_TYPE.LOGO);\n    case LINE_ACTION_TYPE.UPDATE_LINE:\n      const { data: next } = action;\n      return state.map(line => line.id === next.id ? { ...line, ...next } : line);\n    default:\n      throw new Error(`Unrecognized console line action: \"${action.type}\"`);\n  }\n};\n\nconst ConsoleProvider = ({ children }) => {\n  const [lines, lineDispatch] = useReducer(lineReducer, []);\n\n  const print = content => {\n    if (!content) return;\n    if (Array.isArray(content)) {\n      content.forEach(l => lineDispatch({\n        type: LINE_ACTION_TYPE.ADD_LINE,\n        data: l\n      }));\n    } else {\n      lineDispatch({\n        type: LINE_ACTION_TYPE.ADD_LINE,\n        data: content\n      });\n    }\n  };\n\n  const addLogo = content => {\n    lineDispatch({\n      type: LINE_ACTION_TYPE.ADD_LOGO,\n      data: Array.isArray(content) ? content : [content]\n    });\n  };\n\n  const clearScreen = () => {\n    lineDispatch({\n      type: LINE_ACTION_TYPE.CLEAR_LINES\n    });\n  };\n\n  return (\n    <ConsoleContext.Provider\n      value={{ lines }}\n    >\n      <ConsoleActionContext.Provider\n        value={{\n          print,\n          addLogo,\n          clearScreen\n        }}\n      >\n        {children}\n      </ConsoleActionContext.Provider>\n    </ConsoleContext.Provider>\n  )\n}\n\nexport default ConsoleProvider;\n","import React, { useState, useContext } from 'react';\nimport uuid from 'uuid/v4';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport { ConsoleContext } from './context';\nimport { INPUT_EVENT_NAME } from './enums';\nimport './console.scss';\n\nlet currentListeners = [];\n\nexport const registerInputHandler = handler => {\n  const mHandler = e => handler(e.detail);\n  const args = [INPUT_EVENT_NAME, mHandler, false];\n  const event = { id: uuid(), handler, args };\n  currentListeners.push(event);\n  document.addEventListener(...args);\n  return event;\n};\n\nexport const unregisterInputHandler = id => {\n  const found = currentListeners.find(e => e.id === id);\n  if (found) document.removeEventListener(...found.args);\n  return found;\n};\n\nconst dispatchInputEvent = content => {\n  const event = new CustomEvent(INPUT_EVENT_NAME, { detail: content });\n  document.dispatchEvent(event);\n};\n\nconst Console = () => {\n  const { lines } = useContext(ConsoleContext);\n  const [currentInput, setCurrentInput] = useState('');\n\n  const handleInputChange = e => {\n    const val = e.target.value;\n    setCurrentInput(val);\n  }\n\n  const handleInputKeyUp = e => {\n    if (e.key === 'Enter') {\n      dispatchInputEvent(currentInput);\n      setCurrentInput('');\n    }\n  };\n\n  return (\n    <Container fluid className=\"ks-console\">\n      {lines.map(line => (\n        <Row key={`Console-previous-line-${line.id}`}>\n          <Col className=\"ks-console__previous-line\">\n            {line.content}\n          </Col>\n        </Row>\n      ))}\n      <Row>\n        <span>>></span>\n        <input\n          className=\"ks-console__input\"\n          onChange={handleInputChange}\n          value={currentInput}\n          onKeyUp={handleInputKeyUp}\n        />\n      </Row>\n    </Container>\n  );\n};\n\nexport default Console;\n","export const title = [\n  \"|******************************************************************|\",\n  \"|   _              _                                 _             |\",\n  \"|  | |            (_)                               | |            |\",\n  \"|  | | ____ _ _ __ _ ___   ___ _ __   ___  _ __  ___| | ___ _ __   |\",\n  \"|  | |/ / _` | '__| / __| / __| '_ \\\\ / _ \\\\| '_ \\\\/ __| |/ _ \\\\ '__|  |\",\n  \"|  |   < (_| | |  | \\\\__ \\\\ \\\\__ \\\\ |_) | (_) | | | \\\\__ \\\\ |  __/ |     |\",\n  \"|  |_|\\\\_\\\\__,_|_|  |_|___/ |___/ .__/ \\\\___/|_| |_|___/_|\\\\___|_|     |\",\n  \"|                             | |                                  |\",\n  \"|                             |_|                                  |\",\n  \"|                                                                  |\",\n  \"|******************************************************************|\",\n  \"|       web designer      software engineer      pretty cool       |\",\n  \"|******************************************************************|\",\n  \" \"\n];\n\nexport const mainMenu = [\n  \"--> MAIN MENU\",\n  \"a) about me\",\n  \"w) other work\",\n  \"c) contact\",\n  \" \"\n];\n\nexport const bio = [\n  \"I'm a software engineer in Portland, Oregon. Currently working as a full-stack\",\n  \"developer at SurveyMonkey. To be honest, I don't enjoy coding much outside of\",\n  \"work but I do enjoy making digital art, music and doing work on the house I'm\",\n  \"in during my free time. What else do you want to know? It's not a dating profile;\",\n  \"I'm pretty cool. Let's just leave it at that.\"\n];\n","import React, { useContext, useRef } from 'react';\n\nimport { ConsoleActionContext } from '../context';\nimport { registerInputHandler, unregisterInputHandler } from '../Console';\nimport { title, mainMenu, bio } from './printables';\n\nconst Controller = () => {\n  const {\n    print,\n    addLogo,\n    clearScreen\n  } = useContext(ConsoleActionContext);\n  const firstView = useRef(true);\n  const inputHandler = useRef(null);\n\n  const getUserInput = async prompt => {\n    const oldHandler = inputHandler.current;\n    const userInput = await new Promise(acc => {\n      if (inputHandler.current) {\n        unregisterInputHandler(inputHandler.current.id);\n      }\n      inputHandler.current = registerInputHandler(input => acc(input));\n      print(prompt);\n    });\n    unregisterInputHandler(inputHandler.current.id);\n    inputHandler.current = registerInputHandler(oldHandler.handler);\n    return userInput;\n  };\n\n  const listenForBack = async () => {\n    const oldHandler = inputHandler.current;\n    await new Promise(acc => {\n      if (inputHandler.current) {\n        unregisterInputHandler(inputHandler.current.id);\n      }\n      inputHandler.current = registerInputHandler(input => {\n        if (input === 'b') acc();\n      });\n      print([' ', 'enter \"b\" to go back...']);\n    });\n    unregisterInputHandler(inputHandler.current.id);\n    inputHandler.current = registerInputHandler(oldHandler.handler);\n  }\n\n  const mainMenuHandler =  input => {\n    console.log(input);\n    if (input === 'a') {\n      clearScreen();\n      print(bio);\n      listenForBack().then(() => {\n        clearScreen();\n        print(mainMenu);\n      });\n    } else if (input === 'w') {\n      clearScreen();\n    } else if (input === 'c') {\n      clearScreen();\n    } else {\n      print(\"Sorry, that's not one of the options...\");\n    }\n  };\n\n  if (firstView.current) {\n    inputHandler.current = registerInputHandler(mainMenuHandler);\n    addLogo(title);\n    print(mainMenu);\n    firstView.current = false;\n  }\n  return <span />;\n};\n\nexport default Controller;\n","import React from 'react';\n\nimport Controller from './shared/Console/Controller';\nimport { ConsoleProvider, Console } from './shared/Console';\n\nimport './root-styles.scss';\n\nfunction App() {\n  return (\n    <ConsoleProvider>\n      <Console />\n      <Controller />\n    </ConsoleProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
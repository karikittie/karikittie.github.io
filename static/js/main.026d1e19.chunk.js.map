{"version":3,"sources":["App/Console/enums.js","App/Console/context.js","App/Console/Console.js","App/Programs/clearScreen.js","App/Programs/aboutMe.js","App/Programs/work.js","App/Programs/contact.js","App/Console/Controller/printables.js","App/Console/Controller/index.js","App/Programs/index.js","App/index.js","index.js"],"names":["LINE_TYPE","Object","freeze","NORMAL","LOGO","LINE_ACTION_TYPE","ADD_LINE","ADD_LOGO","CLEAR_LINES","UPDATE_LINE","ConsoleContext","createContext","ConsoleActionContext","lineReducer","state","action","type","id","uuid","content","data","map","l","filter","next","line","Error","ConsoleProvider","children","useReducer","lines","lineDispatch","Provider","value","print","Array","isArray","forEach","addLogo","clearScreen","currentListeners","registerInputHandler","handler","args","e","detail","event","push","document","addEventListener","unregisterInputHandler","found","find","removeEventListener","Console","useContext","useState","currentInput","setCurrentInput","Container","fluid","className","Row","key","Col","dangerouslySetInnerHTML","__html","onChange","val","target","onKeyUp","CustomEvent","dispatchEvent","dispatchInputEvent","helpText","command","_","a","hidden","bio","aboutMe","smAudience","work","contact","title","programs","registerProgram","program","Controller","firstView","useRef","inputHandler","csl","output","p","getUserInput","prompt","oldHandler","current","Promise","acc","input","userInput","systemInputHandler","trim","split","cmd","foundProgram","length","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.026d1e19.chunk.js","sourcesContent":["export const LINE_TYPE = Object.freeze({\n  NORMAL: 'NORMAL',\n  LOGO: 'LOGO'\n});\n\nexport const LINE_ACTION_TYPE = Object.freeze({\n  ADD_LINE: 'ADD_LINE',\n  ADD_LOGO: 'ADD_LOGO',\n  CLEAR_LINES: 'CLEAR_LINES',\n  UPDATE_LINE: 'UPDATE_LINE'\n});\n\nexport const INPUT_EVENT_NAME = 'CONSOLE_INPUT_EVENT';\n","import React, { createContext, useReducer } from 'react';\nimport uuid from 'uuid/v4';\n\nimport { LINE_ACTION_TYPE, LINE_TYPE } from './enums';\n\nexport const ConsoleContext = createContext();\nexport const ConsoleActionContext = createContext();\n\nconst lineReducer = (state, action) => {\n  switch (action.type) {\n    case LINE_ACTION_TYPE.ADD_LINE:\n      return [...state, {\n        id: uuid(),\n        content: action.data,\n        type: LINE_TYPE.NORMAL\n      }];\n    case LINE_ACTION_TYPE.ADD_LOGO:\n      return [\n        ...action.data.map(l => ({\n          id: uuid(),\n          content: l,\n          type: LINE_TYPE.LOGO\n        })),\n        ...state.filter(l => l.type !== LINE_TYPE.LOGO)\n      ]\n    case LINE_ACTION_TYPE.CLEAR_LINES:\n      return state.filter(l => l.type === LINE_TYPE.LOGO);\n    case LINE_ACTION_TYPE.UPDATE_LINE:\n      const { data: next } = action;\n      return state.map(line => line.id === next.id ? { ...line, ...next } : line);\n    default:\n      throw new Error(`Unrecognized console line action: \"${action.type}\"`);\n  }\n};\n\nconst ConsoleProvider = ({ children }) => {\n  const [lines, lineDispatch] = useReducer(lineReducer, []);\n\n  const print = content => {\n    if (!content) return;\n    if (Array.isArray(content)) {\n      content.forEach(l => lineDispatch({\n        type: LINE_ACTION_TYPE.ADD_LINE,\n        data: l\n      }));\n    } else {\n      lineDispatch({\n        type: LINE_ACTION_TYPE.ADD_LINE,\n        data: content\n      });\n    }\n  };\n\n  const addLogo = content => {\n    lineDispatch({\n      type: LINE_ACTION_TYPE.ADD_LOGO,\n      data: Array.isArray(content) ? content : [content]\n    });\n  };\n\n  const clearScreen = () => {\n    lineDispatch({\n      type: LINE_ACTION_TYPE.CLEAR_LINES\n    });\n  };\n\n  return (\n    <ConsoleContext.Provider\n      value={{ lines }}\n    >\n      <ConsoleActionContext.Provider\n        value={{\n          print,\n          addLogo,\n          clearScreen\n        }}\n      >\n        {children}\n      </ConsoleActionContext.Provider>\n    </ConsoleContext.Provider>\n  )\n}\n\nexport default ConsoleProvider;\n","import React, { useState, useContext } from 'react';\nimport uuid from 'uuid/v4';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport { ConsoleContext } from './context';\nimport { INPUT_EVENT_NAME } from './enums';\nimport './console.scss';\n\nlet currentListeners = [];\n\nexport const registerInputHandler = handler => {\n  const mHandler = e => handler(e.detail);\n  const args = [INPUT_EVENT_NAME, mHandler, false];\n  const event = { id: uuid(), handler, args };\n  currentListeners.push(event);\n  document.addEventListener(...args);\n  return event;\n};\n\nexport const unregisterInputHandler = id => {\n  const found = currentListeners.find(e => e.id === id);\n  if (found) document.removeEventListener(...found.args);\n  return found;\n};\n\nconst dispatchInputEvent = content => {\n  const event = new CustomEvent(INPUT_EVENT_NAME, { detail: content });\n  document.dispatchEvent(event);\n};\n\nconst Console = () => {\n  const { lines } = useContext(ConsoleContext);\n  const [currentInput, setCurrentInput] = useState('');\n\n  const handleInputChange = e => {\n    const val = e.target.value;\n    setCurrentInput(val);\n  }\n\n  const handleInputKeyUp = e => {\n    if (e.key === 'Enter') {\n      dispatchInputEvent(currentInput);\n      setCurrentInput('');\n    }\n  };\n\n  return (\n    <Container fluid className=\"ks-console\">\n      {lines.map(line => (\n        <Row key={`Console-previous-line-${line.id}`}>\n          <Col className=\"ks-console__previous-line\">\n            <span dangerouslySetInnerHTML={{ __html: line.content }}></span>\n          </Col>\n        </Row>\n      ))}\n      <Row>\n        <span>>></span>\n        <input\n          className=\"ks-console__input\"\n          onChange={handleInputChange}\n          value={currentInput}\n          onKeyUp={handleInputKeyUp}\n        />\n      </Row>\n    </Container>\n  );\n};\n\nexport default Console;\n","const clearScreen = {\n  helpText: 'clears the screen',\n  command: 'clear',\n  handler: async (_, { clearScreen }) => clearScreen(),\n  hidden: false\n};\n\nexport default clearScreen;\n","const bio = [\n  \"I'm a person of above-average height and below-average volleyball and basketball\",\n  \"skills. I live in Portland, Oregon and it's where my heart resides as well. I've\",\n  \"lived a few lives: musician, pastor, baker, barista, manager and atheist are a few\",\n  \"of the identities I've applied to myself over the years. Currently, I'm making code\",\n  \"for money and producing sarcasm in my free time. Working at Survey Monkey (which is\",\n  \"pretty cool) and desperately trying to finish a degree in computer science.\"\n];\n\nconst aboutMe = {\n  helpText: 'prints some info about me',\n  command: 'about',\n  handler: async (_, { clearScreen, print }) => {\n    clearScreen();\n    print(bio);\n  },\n  hidden: false\n};\n\nexport default aboutMe;\n","const smAudience = [\n\"  _____                     _____         _           _____       _ _                 \",\n\"  |   __|_ _ ___ _ _ ___ _ _|     |___ ___| |_ ___ _ _|  _  |_ _ _| |_|___ ___ ___ ___ \",\n\"  |__   | | |  _| | | -_| | | | | | . |   | '_| -_| | |     | | | . | | -_|   |  _| -_|\",\n\"  |_____|___|_|  \\\\_/|___|_  |_|_|_|___|_|_|_,_|___|_  |__|__|___|___|_|___|_|_|___|___|\",\n\"                        |___|                     |___|                                \",\n'  Survey Monkey - Audience: <a href=\"#\">https://www.surveymonkey.com/collect/audience/preview/</a>'\n];\n\nconst work = {\n  helpText: 'shows some of my recent work',\n  command: 'work',\n  handler: async (_, { clearScreen, print }) => {\n    clearScreen();\n    print(smAudience);\n    print(' ');\n    print();\n  },\n  hidden: false\n};\n\nexport default work;\n","const contact = {\n  helpText: 'contact me (note: I will not respond)',\n  command: 'contact',\n  handler: async (_, { clearScreen, print }) => {\n    clearScreen();\n    const options = [\n      'You can contact me in a number of ways...',\n      ' ',\n      'email --> <a href=\"mailto:karis4@pdx.edu\">karis4@pdx.edu</a>',\n      'linkedin --> <a href=\"https://www.linkedin.com/in/karis-sponsler-279aaab3/\" target=\"_BLANK\">goto LinkedIn</a>',\n      ' '\n    ];\n    print(options);\n  },\n  hidden: false\n};\n\nexport default contact;\n","export const title = [\n  \"|******************************************************************|\",\n  \"|   _              _                                 _             |\",\n  \"|  | |            (_)                               | |            |\",\n  \"|  | | ____ _ _ __ _ ___   ___ _ __   ___  _ __  ___| | ___ _ __   |\",\n  \"|  | |/ / _` | '__| / __| / __| '_ \\\\ / _ \\\\| '_ \\\\/ __| |/ _ \\\\ '__|  |\",\n  \"|  |   < (_| | |  | \\\\__ \\\\ \\\\__ \\\\ |_) | (_) | | | \\\\__ \\\\ |  __/ |     |\",\n  \"|  |_|\\\\_\\\\__,_|_|  |_|___/ |___/ .__/ \\\\___/|_| |_|___/_|\\\\___|_|     |\",\n  \"|                             | |                                  |\",\n  \"|                             |_|                                  |\",\n  \"|                                                                  |\",\n  \"|******************************************************************|\",\n  \"|       web designer      software engineer      pretty cool       |\",\n  \"|******************************************************************|\",\n  \" \"\n];\n\nexport const defaultHelpText = 'You can look at a list of commands by typing \"help\" and pressing return.';\n","import React, { useContext, useRef } from 'react';\n\nimport { ConsoleActionContext, ConsoleContext } from '../context';\nimport { registerInputHandler, unregisterInputHandler } from '../Console';\nimport listedPrograms from '../../Programs';\nimport { title, defaultHelpText } from './printables';\nimport { LINE_TYPE } from '../enums';\n\nconst programs = [];\n\nconst registerProgram = (program) => {\n  if (!program.command || !program.handler) {\n    throw new Error('Cannot register a program without a command or handler');\n  }\n  programs.push(program)\n};\n\nlistedPrograms.forEach(program => registerProgram(program));\n\nconst Controller = () => {\n  const {\n    print,\n    addLogo,\n    clearScreen\n  } = useContext(ConsoleActionContext);\n  const { lines } = useContext(ConsoleContext);\n  const firstView = useRef(true);\n  const inputHandler = useRef(null);\n\n  // add help program\n  registerProgram({\n    command: 'help',\n    hidden: true,\n    handler: async (_, csl) => {\n      const { print } = csl;\n      const output = ['** AVAILABLE COMMANDS **', ' '];\n      programs.forEach(p => {\n        if (!p.hidden) {\n          output.push(`${p.command}${p.helpText ? `  -->  ${p.helpText}` : ''}`);\n        }\n      });\n      print(output);\n    }\n  });\n\n  const getUserInput = async prompt => {\n    const oldHandler = inputHandler.current;\n    const userInput = await new Promise(acc => {\n      if (inputHandler.current) {\n        unregisterInputHandler(inputHandler.current.id);\n      }\n      inputHandler.current = registerInputHandler(input => acc(input));\n      print(prompt);\n    });\n    unregisterInputHandler(inputHandler.current.id);\n    inputHandler.current = registerInputHandler(oldHandler.handler);\n    return userInput;\n  };\n\n  const systemInputHandler =  async input => {\n    const args = input.trim().split(' ').filter(cmd => cmd);\n    const foundProgram = programs.find(p => p.command === args[0]);\n    if (foundProgram) {\n      await foundProgram.handler(input, { print, clearScreen, getUserInput });\n    } else {\n      print(`Could not find command \"${input}\"`);\n    }\n  };\n\n  if (firstView.current) {\n    inputHandler.current = registerInputHandler(systemInputHandler);\n    addLogo(title);\n    firstView.current = false;\n  }\n  if (lines.filter(l => l.type !== LINE_TYPE.LOGO).length === 0) {\n    print([defaultHelpText, ' ']);\n  }\n  return <span />;\n};\n\nexport default Controller;\n","import clearScreen from './clearScreen';\nimport aboutMe from './aboutMe';\nimport work from './work';\nimport contact from './contact';\n\nconst programs = [\n  clearScreen,\n  aboutMe,\n  work,\n  contact\n];\n\nexport default programs;\n","import React from 'react';\n\nimport Controller from './Console/Controller';\nimport { ConsoleProvider, Console } from './Console';\n\nimport './root-styles.scss';\n\nfunction App() {\n  return (\n    <ConsoleProvider>\n      <Console />\n      <Controller />\n    </ConsoleProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}